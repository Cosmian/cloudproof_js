/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function webassembly_encrypt_hybrid_header(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function webassembly_create_encryption_cache(a: number, b: number, c: number): void;
export function webassembly_destroy_encryption_cache(a: number, b: number): void;
export function webassembly_encrypt_hybrid_header_using_cache(a: number, b: number, c: number, d: number, e: number): void;
export function webassembly_encrypt_hybrid_block(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbgt_test_encrypt_hybrid_header_2(a: number): void;
export function __wbgt_test_encrypt_hybrid_block_3(a: number): void;
export function webassembly_get_encrypted_header_size(a: number, b: number): void;
export function webassembly_decrypt_hybrid_header(a: number, b: number, c: number): void;
export function webassembly_create_decryption_cache(a: number, b: number): void;
export function webassembly_destroy_decryption_cache(a: number, b: number): void;
export function webassembly_decrypt_hybrid_header_using_cache(a: number, b: number, c: number): void;
export function webassembly_decrypt_hybrid_block(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbgt_test_decrypt_hybrid_header_0(a: number): void;
export function __wbgt_test_non_reg_decrypt_hybrid_block_1(a: number): void;
export function __wbg_wasmbindgentestcontext_free(a: number): void;
export function wasmbindgentestcontext_new(): number;
export function wasmbindgentestcontext_args(a: number, b: number, c: number): void;
export function wasmbindgentestcontext_run(a: number, b: number, c: number): number;
export function __wbgtest_console_log(a: number): void;
export function __wbgtest_console_debug(a: number): void;
export function __wbgtest_console_info(a: number): void;
export function __wbgtest_console_warn(a: number): void;
export function __wbgtest_console_error(a: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4bb94864f6ac7c12(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function wasm_bindgen__convert__closures__invoke0_mut__ha5c77236339fbe2d(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function __wbindgen_free(a: number, b: number): void;
export function wasm_bindgen__convert__closures__invoke3_mut__h0bf5a5d7b3881d67(a: number, b: number, c: number, d: number, e: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__ha736434d00e8fd55(a: number, b: number, c: number, d: number): void;
