
import cover_crypt_wasm from "./pkg/cover_crypt/cosmian_cover_crypt_bg.wasm"
import { setCoverCryptInit } from "./crypto/abe/core/cover_crypt"

import findex_wasm from "./pkg/findex/cosmian_findex_bg.wasm"
import { setFindexInit } from "./crypto/sse/findex/simple"

export * from "./crypto/sse/findex/simple"
export {
  CoverCryptMasterKey,
  type CoverCryptKeyGeneration,
} from "./crypto/abe/core/keygen/cover_crypt"
export { type CoverCryptHybridDecryption } from "./crypto/abe/core/hybrid_crypto/cover_crypt/decryption"
export { type CoverCryptHybridEncryption } from "./crypto/abe/core/hybrid_crypto/cover_crypt/encryption"
export * from "./crypto/abe/core/cover_crypt"
export * from "./crypto/abe/interfaces/encryption_parameters"
export * from "./crypto/abe/interfaces/access_policy"
export * from "./crypto/abe/interfaces/cleartext_header"
export * from "./crypto/abe/interfaces/encrypted_header"
export * from "./crypto/abe/interfaces/policy"
export * from "./crypto/sse/findex/simple"
export * from "./crypto/sse/findex/interfaces/dbInterface"
export * from "./crypto/sse/findex/interfaces/master_keys"
export * from "./crypto/sse/findex/interfaces/index"
export { logger } from "./utils/logger"
export {
  hexDecode,
  hexEncode,
  sanitizeString,
  toBase64,
  deserializeList,
  toBeBytes,
} from "./utils/utils"
export * from "./kms/data_structures/TransparentDHPublicKey"
export * from "./kms/data_structures/TransparentDHPrivateKey"
export * from "./kms/data_structures/KeyWrappingData"
export * from "./kms/data_structures/TransparentECPublicKey"
export * from "./kms/data_structures/TransparentSymmetricKey"
export * from "./kms/data_structures/KeyBlock"
export * from "./kms/data_structures/KeyValue"
export * from "./kms/data_structures/PlainTextKeyValue"
export * from "./kms/data_structures/TransparentECPrivateKey"
export * from "./kms/types/RevocationReason"
export * from "./kms/types/Tag"
export * from "./kms/types/MacSignatureKeyInformation"
export * from "./kms/types/CryptographicParameters"
export * from "./kms/types/CryptographicAlgorithm"
export * from "./kms/types/VendorAttributeReference"
export * from "./kms/types/DigitalSignatureAlgorithm"
export * from "./kms/types/WrappingMethod"
export * from "./kms/types/EncryptionKeyInformation"
export * from "./kms/types/BlockCipherMode"
export * from "./kms/types/KeyWrapType"
export * from "./kms/types/SecretDataType"
export * from "./kms/types/SplitKeyMethod"
export * from "./kms/types/LinkedObjectIdentifier"
export * from "./kms/types/EncodingOption"
export * from "./kms/types/KeyRoleType"
export * from "./kms/types/PaddingMethod"
export * from "./kms/types/KeyCompressionType"
export * from "./kms/types/MaskGenerator"
export * from "./kms/types/CryptographicDomainParameters"
export * from "./kms/types/LinkType"
export * from "./kms/types/HashingAlgorithm"
export * from "./kms/types/RecommendedCurve"
export * from "./kms/types/UniqueIdentifier"
export * from "./kms/types/StorageStatusMask"
export * from "./kms/types/KeyFormatType"
export * from "./kms/types/ErrorReason"
export * from "./kms/types/OpaqueDataType"
export * from "./kms/types/RevocationReasonEnumeration"
export * from "./kms/types/Attributes"
export * from "./kms/types/AttributeReference"
export * from "./kms/types/CryptographicUsageMask"
export * from "./kms/types/ObjectGroupMember"
export * from "./kms/types/VendorAttribute"
export * from "./kms/types/ObjectType"
export * from "./kms/types/CertificateRequestType"
export * from "./kms/types/Link"
export * from "./kms/types/ProtectionStorageMasks"
export * from "./kms/types/CertificateType"
export * from "./kms/decorators/function"
export * from "./kms/decorators/interface"
export * from "./kms/objects/SymmetricKey"
export * from "./kms/objects/PublicKey"
export * from "./kms/objects/CertificateRequest"
export * from "./kms/objects/KmipObject"
export * from "./kms/objects/PrivateKey"
export * from "./kms/objects/PGPKey"
export * from "./kms/objects/SplitKey"
export * from "./kms/objects/OpaqueObject"
export * from "./kms/objects/Certificate"
export * from "./kms/objects/SecretData"
export * from "./kms/serialize/Ttlv"
export * from "./kms/operations/Get"
export * from "./kms/operations/GetResponse"
export * from "./kms/operations/EncryptResponse"
export * from "./kms/operations/ReKeyKeyPairResponse"
export * from "./kms/operations/CreateKeyPair"
export * from "./kms/operations/Revoke"
export * from "./kms/operations/GetAttributes"
export * from "./kms/operations/ImportResponse"
export * from "./kms/operations/DecryptResponse"
export * from "./kms/operations/GetAttributesResponse"
export * from "./kms/operations/Decrypt"
export * from "./kms/operations/CreateResponse"
export * from "./kms/operations/CreateKeyPairResponse"
export * from "./kms/operations/LocateResponse"
export * from "./kms/operations/Locate"
export * from "./kms/operations/DestroyResponse"
export * from "./kms/operations/RevokeResponse"
export * from "./kms/operations/Create"
export * from "./kms/operations/Destroy"
export * from "./kms/operations/ReKeyKeyPair"
export * from "./kms/operations/Import"
export * from "./kms/operations/Encrypt"
export * from "./kms/json/KmipEnumUtils"
export * from "./kms/json/KmipChoiceAttributeReference"
export * from "./kms/json/KmipStruct"
export * from "./kms/client/KmipClient"

// @ts-expect-error @ts-ignore-error
setCoverCryptInit(() => cover_crypt_wasm());

// @ts-expect-error @ts-ignore-error
setFindexInit(() => findex_wasm());